#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import * as https from 'https';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

// üé® –¶–í–ï–¢–û–í–ê–Ø –ü–ê–õ–ò–¢–†–ê
const colors = {
  RED: '\x1b[0;31m',
  GREEN: '\x1b[0;32m',
  BLUE: '\x1b[0;34m',
  PURPLE: '\x1b[0;35m',
  CYAN: '\x1b[0;36m',
  YELLOW: '\x1b[1;33m',
  BOLD: '\x1b[1m',
  DIM: '\x1b[2m',
  RESET: '\x1b[0m'
};

// ‚ö° –ö–†–ê–°–ò–í–´–ô –°–ü–ò–ù–ù–ï–†
function spinner(message: string, duration: number = 1000): Promise<void> {
  return new Promise((resolve) => {
    const frames = ['‚†ã', '‚†ô', '‚†π', '‚†∏', '‚†º', '‚†¥', '‚†¶', '‚†ß', '‚†á', '‚†è'];
    let frameIndex = 0;
    
    const interval = setInterval(() => {
      process.stdout.write(`\r${colors.CYAN}${frames[frameIndex]} ${message}${colors.RESET}`);
      frameIndex = (frameIndex + 1) % frames.length;
    }, 100);
    
    setTimeout(() => {
      clearInterval(interval);
      process.stdout.write(`\r${colors.GREEN}‚úÖ ${message} - –≥–æ—Ç–æ–≤–æ!${colors.RESET}\n`);
      resolve();
    }, duration);
  });
}

// üìä –ü–†–û–ì–†–ï–°–°-–ë–ê–†
function progressBar(current: number, total: number, label: string): void {
  const width = 30;
  const percentage = Math.round((current / total) * 100);
  const filled = Math.round((current / total) * width);
  const empty = width - filled;
  
  const bar = `${colors.GREEN}${'‚ñà'.repeat(filled)}${colors.DIM}${'‚ñë'.repeat(empty)}${colors.RESET}`;
  process.stdout.write(`\r${colors.CYAN}[${bar}${colors.CYAN}] ${colors.YELLOW}${percentage}%${colors.RESET} ${label}`);
  
  if (current === total) {
    console.log('');
  }
}

class CrapmManager {
  private baseUrl = 'https://raw.githubusercontent.com/derxanax/crack/main/modules';

  showLogo(): void {
    console.log(`\nüì¶ CRAPM - Package Manager`);
    console.log(`–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ –¥–ª—è Crack\n`);
  }

  async install(moduleName: string): Promise<void> {
    console.log(`\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è: ${moduleName}`);

    const moduleDir = path.join(process.cwd(), 'crack_modules', moduleName);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    console.log(`üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫...`);
    if (!fs.existsSync(path.join(process.cwd(), 'crack_modules'))) {
      fs.mkdirSync(path.join(process.cwd(), 'crack_modules'), { recursive: true });
    }

    if (!fs.existsSync(moduleDir)) {
      fs.mkdirSync(moduleDir, { recursive: true });
      fs.mkdirSync(path.join(moduleDir, 'src'), { recursive: true });
    }
    console.log(`‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã`);

    try {
      // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
      console.log(`üì¶ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...`);
      
      console.log(`üìÑ info.json`);
      await this.downloadFile(`${this.baseUrl}/${moduleName}/info.json`, path.join(moduleDir, 'info.json'));
      
      console.log(`üìÑ package.json`);
      await this.downloadFile(`${this.baseUrl}/${moduleName}/package.json`, path.join(moduleDir, 'package.json'));
      
      console.log(`üìÑ index.js`);
      await this.downloadFile(`${this.baseUrl}/${moduleName}/src/index.js`, path.join(moduleDir, 'src', 'index.js'));
      
      console.log(`‚úÖ –§–∞–π–ª—ã —Å–∫–∞—á–∞–Ω—ã`);
      
      // npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      console.log(`üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...`);
      await this.installNpmDependencies(moduleDir, moduleName);
      
      // Crack –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
      console.log(`üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...`);
      await this.installCrackDependencies(moduleName);
      
      // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      console.log(`üéâ –ú–æ–¥—É–ª—å ${moduleName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
      console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: imp ${moduleName}\n`);
    } catch (error: any) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
      
      if (error.message.includes('404')) {
        console.log(`ü§î –ú–æ–¥—É–ª—å "${moduleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        console.log(`üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'crapm list-available'`);
        console.log(`üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥—É–ª–∏: input, math, string, file`);
              } else if (error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND')) {
          console.log(`üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.`);
              } else {
          console.log(`üîß –û—à–∏–±–∫–∞: ${error.message}`);
      }
      
      if (fs.existsSync(moduleDir)) {
        fs.rmSync(moduleDir, { recursive: true, force: true });
        console.log('üßπ –û—á–∏—Å—Ç–∏–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª—è');
      }
    }
  }

  private async installNpmDependencies(moduleDir: string, moduleName: string): Promise<void> {
    try {
      const packageJsonPath = path.join(moduleDir, 'package.json');
      
      if (!fs.existsSync(packageJsonPath)) {
        console.log(`${colors.YELLOW}‚ö†Ô∏è package.json –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.RESET}`);
        return;
      }

      const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
      
      if (!packageJson.dependencies || Object.keys(packageJson.dependencies).length === 0) {
        console.log(`‚úÖ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è`);
        return;
      }

      console.log(`üìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(packageJson.dependencies).join(', ')}`);
      console.log(`‚è≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–æ–≤...`);

      const { stdout, stderr } = await execAsync('npm install', { cwd: moduleDir });
      
      if (stderr && !stderr.includes('npm WARN')) {
        console.log(`${colors.YELLOW}‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${stderr}${colors.RESET}`);
      }
      
      console.log(`‚úÖ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
      
    } catch (error: any) {
      console.log(`${colors.RED}‚ùå –û—à–∏–±–∫–∞ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° ${error.message}${colors.RESET}`);
      console.log(`${colors.DIM}üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: cd crack_modules/${moduleName} && npm install${colors.RESET}\n`);
    }
  }

  private async installCrackDependencies(moduleName: string): Promise<void> {
    try {
      const infoJsonPath = path.join(process.cwd(), 'crack_modules', moduleName, 'info.json');
      
      if (!fs.existsSync(infoJsonPath)) {
        return;
      }

      const infoJson = JSON.parse(fs.readFileSync(infoJsonPath, 'utf-8'));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ dependencies –≤ info.json
      if (!infoJson.dependencies || infoJson.dependencies.length === 0) {
        console.log(`${colors.GREEN}‚úÖ Crack –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è${colors.RESET}\n`);
        return;
      }

      console.log(`${colors.DIM}üìã –¢—Ä–µ–±—É–µ–º—ã–µ –º–æ–¥—É–ª–∏: ${infoJson.dependencies.join(', ')}${colors.RESET}`);

      for (const dependency of infoJson.dependencies) {
        const dependencyDir = path.join(process.cwd(), 'crack_modules', dependency);
        
        if (fs.existsSync(dependencyDir)) {
          console.log(`${colors.GREEN}‚úÖ ${dependency} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.RESET}`);
          continue;
        }
        
        console.log(`${colors.YELLOW}üì• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dependency}${colors.RESET}`);
        await this.install(dependency);
      }
      
      console.log(`${colors.GREEN}‚úÖ –í—Å–µ Crack –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã${colors.RESET}\n`);
      
    } catch (error: any) {
      console.log(`${colors.RED}‚ùå –û—à–∏–±–∫–∞ Crack –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° ${error.message}${colors.RESET}\n`);
    }
  }

  async listAvailable(): Promise<void> {
    console.log(`\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:`);

    try {
      // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
      const listModPath = path.join(__dirname, '..', 'modules', 'listmod.json');
      
      if (!fs.existsSync(listModPath)) {
        console.log(`${colors.RED}‚ùå –§–∞–π–ª listmod.json –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.RESET}`);
        console.log(`${colors.YELLOW}üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π${colors.RESET}\n`);
        
        // –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        const fallbackModules = [
          { name: 'input', description: '–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º' },
          { name: 'math', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏' }
        ];
        
        fallbackModules.forEach(module => {
          console.log(`  ${colors.GREEN}üìã ${colors.BOLD}${module.name.padEnd(10)}${colors.RESET} ${colors.DIM}- ${module.description}${colors.RESET}`);
        });
      } else {
        const modulesList = JSON.parse(fs.readFileSync(listModPath, 'utf-8'));
        
        if (!modulesList.modules || !Array.isArray(modulesList.modules)) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç listmod.json');
        }
        
        modulesList.modules.forEach((module: any) => {
          console.log(`  üìã ${module.name} - ${module.description}`);
        });
      }
    } catch (error: any) {
      console.log(`${colors.RED}‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π: ${error.message}${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª modules/listmod.json${colors.RESET}\n`);
      return;
    }

    console.log(`\nüí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞: crapm install <module>`);
    console.log(`üîç –ü—Ä–∏–º–µ—Ä: crapm install input\n`);
  }

  uninstall(moduleName: string): void {
    console.log(`\n${colors.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.RESET}`);
    console.log(`${colors.CYAN}‚ïë${colors.RESET}        üóëÔ∏è  ${colors.RED}–£–î–ê–õ–ï–ù–ò–ï –ú–û–î–£–õ–Ø${colors.RESET} üóëÔ∏è         ${colors.CYAN}‚ïë${colors.RESET}`);
    console.log(`${colors.CYAN}‚ïë${colors.RESET}            ${colors.YELLOW}${moduleName}${colors.RESET}                   ${colors.CYAN}‚ïë${colors.RESET}`);
    console.log(`${colors.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.RESET}\n`);
    
    const moduleDir = path.join(process.cwd(), 'crack_modules', moduleName);
    
    if (fs.existsSync(moduleDir)) {
      fs.rmSync(moduleDir, { recursive: true, force: true });
      console.log(`${colors.GREEN}‚úÖ –ú–æ–¥—É–ª—å ${moduleName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω${colors.RESET}\n`);
    } else {
      console.log(`${colors.RED}‚ùå –ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –Ω–∞–π–¥–µ–Ω${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'crapm list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π${colors.RESET}\n`);
    }
  }

  list(): void {
    console.log(`\n${colors.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.RESET}`);
    console.log(`${colors.CYAN}‚ïë${colors.RESET}      üì¶ ${colors.YELLOW}–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ú–û–î–£–õ–ò${colors.RESET} üì¶      ${colors.CYAN}‚ïë${colors.RESET}`);
    console.log(`${colors.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.RESET}\n`);
    
    const modulesDir = path.join(process.cwd(), 'crack_modules');
    
    if (!fs.existsSync(modulesDir)) {
      console.log(`${colors.DIM}üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: crapm install <module_name>${colors.RESET}\n`);
      return;
    }

    const modules = fs.readdirSync(modulesDir);
    
    if (modules.length === 0) {
      console.log(`${colors.DIM}üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: crapm install <module_name>${colors.RESET}\n`);
    } else {
      modules.forEach(module => {
        const infoPath = path.join(modulesDir, module, 'info.json');
        if (fs.existsSync(infoPath)) {
          try {
          const info = JSON.parse(fs.readFileSync(infoPath, 'utf-8'));
          console.log(`  ${colors.GREEN}‚úÖ ${colors.BOLD}${module}${colors.RESET} ${colors.CYAN}v${info.version}${colors.RESET} ${colors.DIM}- ${info.description}${colors.RESET}`);
          } catch {
            console.log(`  ${colors.YELLOW}‚ö†Ô∏è ${module} (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω info.json)${colors.RESET}`);
          }
        } else {
          console.log(`  ${colors.YELLOW}‚ö†Ô∏è ${module} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç info.json)${colors.RESET}`);
        }
      });
      console.log('');
    }
  }

  private downloadFile(url: string, filepath: string): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = https.get(url, (response) => {
        if (response.statusCode === 404) {
          reject(new Error(`HTTP 404: –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (${url})`));
          return;
        }
        
        if (response.statusCode !== 200) {
          reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
          return;
        }

        const fileStream = fs.createWriteStream(filepath);
        response.pipe(fileStream);

        fileStream.on('finish', () => {
          fileStream.close();
          resolve();
        });

        fileStream.on('error', (err) => {
          fs.unlink(filepath, () => {});
          reject(err);
        });
      });

      request.on('error', (err) => {
        reject(new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}`));
      });

      request.setTimeout(10000, () => {
        request.destroy();
        reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (10 —Å–µ–∫)'));
      });
    });
  }
}

function main(): void {
  const crapm = new CrapmManager();
  const args = process.argv.slice(2);

  if (args.length === 0) {
    crapm.showLogo();
    console.log(`–ö–æ–º–∞–Ω–¥—ã:`);
    console.log(`  install <module>     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å`);
    console.log(`  uninstall <module>   - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å`);
    console.log(`  list                 - –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö`);
    console.log(`  list-available       - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö`);
    console.log(`\nüí° –ü—Ä–∏–º–µ—Ä: crapm install input\n`);
    return;
  }

  const command = args[0];
  const moduleName = args[1];

  switch (command) {
    case 'install':
      if (!moduleName) {
        console.log(`${colors.RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏${colors.RESET}`);
        console.log(`${colors.YELLOW}üí° –ü—Ä–∏–º–µ—Ä: crapm install input${colors.RESET}\n`);
        return;
      }
      crapm.install(moduleName);
      break;

    case 'uninstall':
      if (!moduleName) {
        console.log(`${colors.RED}‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è${colors.RESET}`);
        console.log(`${colors.YELLOW}üí° –ü—Ä–∏–º–µ—Ä: crapm uninstall input${colors.RESET}\n`);
        return;
      }
      crapm.uninstall(moduleName);
      break;

    case 'list':
      crapm.list();
      break;

    case 'list-available':
      crapm.listAvailable();
      break;

    default:
      console.log(`${colors.RED}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞${colors.RESET}`);
      console.log(`${colors.YELLOW}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: install, uninstall, list, list-available${colors.RESET}\n`);
  }
}

if (require.main === module) {
  main();
}

export { CrapmManager }; 