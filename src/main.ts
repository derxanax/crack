#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import * as http from 'http';
import * as readline from 'readline';

enum TokenType {
  IDENTIFIER = 'IDENTIFIER',
  STRING = 'STRING', 
  NUMBER = 'NUMBER',
  OPERATOR = 'OPERATOR',
  KEYWORD = 'KEYWORD',
  PARENTHESIS = 'PARENTHESIS',
  BRACE = 'BRACE',
  COMPARISON = 'COMPARISON',
  LOGICAL = 'LOGICAL',
  INDENT = 'INDENT',
  DEDENT = 'DEDENT',
  NEWLINE = 'NEWLINE',
  UNKNOWN = 'UNKNOWN',
  EOF = 'EOF'
}

interface Token {
  type: TokenType;
  value: string;
  line: number;
}

interface ASTNode {
  type: string;
  [key: string]: any;
}

class AIFixProvider {
  private static API_URL = 'http://localhost:3700';
  
  static async checkApiStatus(): Promise<boolean> {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API –Ω–∞ localhost:3700...');
    
    return new Promise((resolve) => {
      const req = http.get(`${this.API_URL}/api/status`, (res) => {
        console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: ${res.statusCode}`);
        
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
          console.log(`üì• –ü–æ–ª—É—á–µ–Ω chunk —Å—Ç–∞—Ç—É—Å–∞: ${chunk.length} –±–∞–π—Ç`);
        });
        
        res.on('end', () => {
          console.log('üì¶ –û–¢–í–ï–¢ –°–¢–ê–¢–£–°–ê API:');
          console.log(data);
          
          try {
            const status = JSON.parse(data);
            console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:', status);
            const isReady = status.status === 'ready';
            console.log(`üéØ API –≥–æ—Ç–æ–≤: ${isReady}`);
            resolve(isReady);
          } catch (parseError) {
            console.log('üí• –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê –°–¢–ê–¢–£–°–ê:', parseError);
            resolve(false);
          }
        });
      }).on('error', (err) => {
        console.log('üî• –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê –°–¢–ê–¢–£–°–ê:', err);
        resolve(false);
      });
      
      req.setTimeout(3000, () => {
        console.log('‚è∞ –¢–ê–ô–ú–ê–£–¢ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (3 —Å–µ–∫)');
        req.destroy();
        resolve(false);
      });
    });
  }
  
  static async fixCodeWithAI(code: string, error: string): Promise<string | null> {
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —è–∑—ã–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Crack. –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ.

=== –ü–û–õ–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –Ø–ó–´–ö–ê CRACK ===

–ö–û–ú–ê–ù–î–´:
1. conlog "—Ç–µ–∫—Å—Ç" - –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω
2. conlog (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) - –≤—ã–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
3. –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è = –∑–Ω–∞—á–µ–Ω–∏–µ - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
4. codego:(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è) - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
5. imp –º–æ–¥—É–ª—å - –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
6. // —Ç–µ–∫—Å—Ç // - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–ù–ï –æ–±—ã—á–Ω—ã–µ //)

–ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´:
conlog "Hello World"
name = "Crack"
conlog (name)
x = 5
y = x + 10
conlog (y)
code = "conlog \\"test\\""
codego:(code)
imp math

–ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:

–û–®–ò–ë–ö–ê: conlog (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: conlog "—Ç–µ–∫—Å—Ç" –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É

–û–®–ò–ë–ö–ê: conlog (
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: conlog ("—Ç–µ–∫—Å—Ç") –∏–ª–∏ conlog (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

–û–®–ò–ë–ö–ê: conlog )
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: conlog ("—Ç–µ–∫—Å—Ç")

–û–®–ò–ë–ö–ê: conlog (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ conlog "—Ç–µ–∫—Å—Ç"

–û–®–ò–ë–ö–ê: codego (–±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∏–ª–∏ codego:(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

–û–®–ò–ë–ö–ê: codego:
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: codego:(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

–û–®–ò–ë–ö–ê: codego:(
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: codego:(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)

–û–®–ò–ë–ö–ê: imp (–±–µ–∑ –º–æ–¥—É–ª—è)
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: imp math –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É

–û–®–ò–ë–ö–ê: –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏
–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏

–£–°–õ–û–í–ò–Ø –ò –¶–ò–ö–õ–´:
8. if (—É—Å–ª–æ–≤–∏–µ) { –∫–æ–¥ } - —É—Å–ª–æ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
9. else { –∫–æ–¥ } - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–ª–æ–∫
10. while (—É—Å–ª–æ–≤–∏–µ) { –∫–æ–¥ } - —Ü–∏–∫–ª while
11. for (i = 0; i < 10; i = i + 1) { –∫–æ–¥ } - —Ü–∏–∫–ª for

–û–ü–ï–†–ê–¢–û–†–´ –°–†–ê–í–ù–ï–ù–ò–Ø:
==, !=, >, <, >=, <=

–ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–†–ò–ú–ï–†–´ –¶–ò–ö–õ–û–í:
x = 5
if (x > 3) {
  conlog "x –±–æ–ª—å—à–µ 3"
} else {
  conlog "x –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 3" 
}

i = 0
while (i < 5) {
  conlog (i)
  i = i + 1
}

for (j = 0; j < 3; j = j + 1) {
  conlog "–ò—Ç–µ—Ä–∞—Ü–∏—è"
  conlog (j)
}

–í–ê–ñ–ù–û:
- –£–¥–∞–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ò—Å–ø—Ä–∞–≤–ª—è–π —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø—É—Å—Ç—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ç–∏–ø–∞ conlog ""
- –ò—Å–ø–æ–ª—å–∑—É–π { } –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –≤ if/while/for

–¢–ï–ö–£–©–ê–Ø –û–®–ò–ë–ö–ê: ${error}

–ò–°–•–û–î–ù–´–ô –ö–û–î:
${code}

–î–∞–π –≤ –æ—Ç–≤–µ—Ç–µ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —á–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –º—É—Å–æ—Ä–∞, –∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫:`;

    console.log('üì§ –û–¢–ü–†–ê–í–õ–Ø–Æ –ü–†–û–ú–ü–¢ –ò–ò:');
    console.log('‚ïê'.repeat(50));
    console.log(prompt);
    console.log('‚ïê'.repeat(50));

    return new Promise((resolve) => {
      const postData = JSON.stringify({ message: prompt });
      
      console.log('üåê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ API localhost:3700...');
      
      const options = {
        hostname: 'localhost',
        port: 3700,
        path: '/api/send',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(postData)
        }
      };
      
      const req = http.request(options, (res) => {
        console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.statusCode}`);
        console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${JSON.stringify(res.headers)}`);
        
        let data = '';
        res.on('data', (chunk) => {
          data += chunk;
          console.log(`üì• –ü–æ–ª—É—á–µ–Ω chunk: ${chunk.length} –±–∞–π—Ç`);
        });
        
        res.on('end', () => {
          console.log('üì¶ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ API:');
          console.log('‚ïê'.repeat(50));
          console.log(data);
          console.log('‚ïê'.repeat(50));
          
          try {
            const response = JSON.parse(data);
            console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');
            console.log('üîç response.success:', response.success);
            console.log('üìù response.response:', response.response);
            
            if (response.success && response.response) {
              const fixedCode = response.response.trim();
              console.log('‚ú® –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ö–û–î:');
              console.log('‚ïê'.repeat(50));
              console.log(fixedCode);
              console.log('‚ïê'.repeat(50));
              resolve(fixedCode);
            } else {
              console.log('‚ùå –û—à–∏–±–∫–∞: response.success=false –∏–ª–∏ –ø—É—Å—Ç–æ–π response.response');
              resolve(null);
            }
          } catch (parseError) {
            console.log('üí• –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON:', parseError);
            console.log('üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
            resolve(null);
          }
        });
      });
      
      req.on('error', (err) => {
        console.log('üî• –û–®–ò–ë–ö–ê HTTP –ó–ê–ü–†–û–°–ê:', err);
        resolve(null);
      });
      
      // –£–±–∏—Ä–∞–µ–º —Ç–∞–π–º–∞—É—Ç - –¥–∞–µ–º –ò–ò —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
      // req.setTimeout(30000, () => {
      //   console.log('‚è∞ –¢–ê–ô–ú–ê–£–¢ –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫)');
      //   req.destroy();
      //   resolve(null);
      // });
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...');
      req.write(postData);
      req.end();
    });
  }
}

class ErrorHandler {
  static async showCriticalError(message: string, line: number, suggestion: string, code?: string, filename?: string): Promise<void> {
    console.log(`
üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê (—Å—Ç—Ä–æ–∫–∞ ${line}) üö®
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ${message.padEnd(34)} ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üí° –°–û–í–ï–¢: ${suggestion}
`);
    
    if (code && filename) {
      console.log(`ü§ñ –ë–ï–¢–ê –ò –û–ü–ê–°–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ò—Å–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –ò–ò? (y/n)`);
      
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      
             rl.question('', async (answer) => {
         rl.close();
         
         if (answer.toLowerCase() === 'y' || answer.toLowerCase() === '–¥–∞') {
           console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API...');
           
           const apiReady = await AIFixProvider.checkApiStatus();
           if (!apiReady) {
             console.log('‚ùå API –Ω–µ –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä —Å–Ω–∞—á–∞–ª–∞.');
             process.exit(1);
           }
           
           console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
           
           const fixedCode = await AIFixProvider.fixCodeWithAI(code, message);
           if (fixedCode) {
             fs.writeFileSync(filename, fixedCode, 'utf-8');
             console.log(`‚úÖ –ö–æ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${filename}`);
             console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
           } else {
             console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç –ò–ò.');
           }
         }
         process.exit(0);
       });
    }
  }

  static showWarning(message: string, line: number, token: string): void {
    console.log(`‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï (—Å—Ç—Ä–æ–∫–∞ ${line}): ${message} '${token}'`);
  }

  static showUnknownToken(token: string, line: number): void {
    console.log(`‚ö†Ô∏è  –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${line}: '${token}'`);
  }
}

const KEYWORDS = ['conlog', 'imp', 'codego', 'if', 'else', 'while', 'for'];
const OPERATORS = ['+', '-', '*', '/', '=', '.', '?', '#'];
const COMPARISON_OPERATORS = ['==', '!=', '>=', '<=', '>', '<'];
const LOGICAL_OPERATORS = ['&&', '||', '!'];

class CrackInterpreter {
  private variables: Map<string, any> = new Map();
  private modules: Map<string, any> = new Map();
  private currentFilename: string = '';

  showLogo(): void {
    console.log(`
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó 
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    v1.0.0 - Ready to crack code! üíª
`);
  }

  tokenize(code: string): Token[] {
    const tokens: Token[] = [];
    const lines = code.split('\n');
    const indentStack: number[] = [0];
    let lineNumber = 1;
    
    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
      const line = lines[lineIndex];
      lineNumber = lineIndex + 1;
      
      if (line.trim() === '') continue;
      
      let indentLevel = 0;
      for (let i = 0; i < line.length; i++) {
        if (line[i] === ' ') {
          indentLevel++;
        } else {
          break;
        }
      }
      
      const currentIndent = indentStack[indentStack.length - 1];
      
      if (indentLevel > currentIndent) {
        indentStack.push(indentLevel);
        tokens.push({ type: TokenType.INDENT, value: '', line: lineNumber });
      } else if (indentLevel < currentIndent) {
        while (indentStack.length > 1 && indentStack[indentStack.length - 1] > indentLevel) {
          indentStack.pop();
          tokens.push({ type: TokenType.DEDENT, value: '', line: lineNumber });
        }
      }
      
      const trimmedLine = line.trim();
      let current = 0;

      while (current < trimmedLine.length) {
        let char = trimmedLine[current];

      if (/\s/.test(char)) {
        current++;
        continue;
      }

      if (char === '"') {
        let value = '';
        current++;
          let startLine = lineNumber;
          while (current < trimmedLine.length && trimmedLine[current] !== '"') {
            value += trimmedLine[current];
          current++;
        }
          
          if (current >= trimmedLine.length) {
            ErrorHandler.showCriticalError(
              '–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å—Ç—Ä–æ–∫–∞', 
              startLine, 
              '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É "');
            tokens.push({ type: TokenType.STRING, value, line: startLine });
          } else {
        current++;
            tokens.push({ type: TokenType.STRING, value, line: lineNumber });
          }
        continue;
      }

      if (/\d/.test(char)) {
        let value = '';
        while (current < trimmedLine.length && /\d/.test(trimmedLine[current])) {
          value += trimmedLine[current];
          current++;
        }
        tokens.push({ type: TokenType.NUMBER, value, line: lineNumber });
        continue;
      }

      if (char === '(' || char === ')') {
        tokens.push({ type: TokenType.PARENTHESIS, value: char, line: lineNumber });
        current++;
        continue;
      }

      if (char === '{' || char === '}') {
        tokens.push({ type: TokenType.BRACE, value: char, line: lineNumber });
        current++;
        continue;
      }

      // Check for comparison operators (must be before single operators)
      let comparisonOp = '';
      for (const op of COMPARISON_OPERATORS) {
        if (trimmedLine.substring(current, current + op.length) === op) {
          comparisonOp = op;
          break;
        }
      }
      if (comparisonOp) {
        tokens.push({ type: TokenType.COMPARISON, value: comparisonOp, line: lineNumber });
        current += comparisonOp.length;
        continue;
      }

      // Check for logical operators
      let logicalOp = '';
      for (const op of LOGICAL_OPERATORS) {
        if (trimmedLine.substring(current, current + op.length) === op) {
          logicalOp = op;
          break;
        }
      }
      if (logicalOp) {
        tokens.push({ type: TokenType.LOGICAL, value: logicalOp, line: lineNumber });
        current += logicalOp.length;
        continue;
      }

      if (char === ':') {
        tokens.push({ type: TokenType.OPERATOR, value: char, line: lineNumber });
        current++;
        continue;
      }

      if (OPERATORS.includes(char)) {
        tokens.push({ type: TokenType.OPERATOR, value: char, line: lineNumber });
        current++;
        continue;
      }

      if (char === '/' && trimmedLine[current + 1] === '/') {
        let value = '';
        current += 2;
        while (current < trimmedLine.length && !(trimmedLine[current] === '/' && trimmedLine[current + 1] === '/')) {
          value += trimmedLine[current];
          current++;
        }
        current += 2;
        tokens.push({ type: TokenType.STRING, value: value.trim(), line: lineNumber });
        continue;
      }

      if (/[a-zA-Z]/.test(char)) {
        let value = '';
        while (current < trimmedLine.length && /[a-zA-Z0-9_]/.test(trimmedLine[current])) {
          value += trimmedLine[current];
          current++;
        }
        
        const type = KEYWORDS.includes(value) ? TokenType.KEYWORD : TokenType.IDENTIFIER;
        tokens.push({ type, value, line: lineNumber });
        continue;
      }

      let unknownValue = '';
      while (current < trimmedLine.length && !/[\s\n]/.test(trimmedLine[current])) {
        unknownValue += trimmedLine[current];
      current++;
      }
      
      if (unknownValue) {
        ErrorHandler.showUnknownToken(unknownValue, lineNumber);
        tokens.push({ type: TokenType.UNKNOWN, value: unknownValue, line: lineNumber });
      }
      }
    }

    tokens.push({ type: TokenType.EOF, value: '', line: lineNumber });
    return tokens;
  }

  async parse(tokens: Token[]): Promise<ASTNode[]> {
    const ast: ASTNode[] = [];
    let current = 0;

    while (current < tokens.length && tokens[current].type !== TokenType.EOF) {
      const token = tokens[current];

      if (token.type === TokenType.KEYWORD && token.value === 'conlog') {
        current++;
        const nextToken = tokens[current];
        
        if (!nextToken || nextToken.type === TokenType.EOF) {
          const originalCode = fs.readFileSync(this.currentFilename, 'utf-8');
          await ErrorHandler.showCriticalError(
            '–ö–æ–º–∞–Ω–¥–∞ conlog —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç',
            token.line,
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: conlog "—Ç–µ–∫—Å—Ç" –∏–ª–∏ conlog (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)',
            originalCode,
            this.currentFilename
          );
          return ast;
        }
        
        if (nextToken.type === TokenType.STRING) {
          ast.push({
            type: 'FunctionCall',
            name: 'conlog',
            args: [{ type: 'String', value: nextToken.value }]
          });
          current++;
        } else if (nextToken.type === TokenType.PARENTHESIS && nextToken.value === '(') {
          current++;
          const varToken = tokens[current];
          
          if (!varToken || varToken.type !== TokenType.IDENTIFIER) {
            ErrorHandler.showCriticalError(
              '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å conlog',
              token.line,
              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: conlog (–∏–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)'
            );
            current++;
            continue;
          }
          
          current++;
          const closeToken = tokens[current];
          
          if (!closeToken || closeToken.value !== ')') {
            ErrorHandler.showCriticalError(
              '–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞ –≤ conlog',
              token.line,
              '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É )'
            );
          } else {
            if (!this.variables.has(varToken.value)) {
              ErrorHandler.showWarning(
                '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
                varToken.line,
                varToken.value
              );
            }
            
            ast.push({
              type: 'FunctionCall', 
              name: 'conlog',
              args: [{ type: 'Variable', name: varToken.value }]
            });
            current++;
          }
        } else {
          const originalCode = fs.readFileSync(this.currentFilename, 'utf-8');
          await ErrorHandler.showCriticalError(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è conlog',
            nextToken.line,
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: conlog "—Å—Ç—Ä–æ–∫–∞" –∏–ª–∏ conlog (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è)',
            originalCode,
            this.currentFilename
          );
          return ast;
        }
      } else if (token.type === TokenType.IDENTIFIER) {
        const nextToken = tokens[current + 1];
        if (nextToken && nextToken.type === TokenType.OPERATOR && nextToken.value === '=') {
          current += 2;
          const valueToken = tokens[current];
          
          if (!valueToken) {
            ErrorHandler.showCriticalError(
              '–ù–µ–ø–æ–ª–Ω–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π',
              token.line,
              '–î–æ–±–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ ='
            );
            break;
          }
          
          if (valueToken.type === TokenType.NUMBER) {
            ast.push({
              type: 'VariableAssignment',
              name: token.value,
              value: { type: 'Number', value: parseInt(valueToken.value) }
            });
            current++;
          } else if (valueToken.type === TokenType.STRING) {
            ast.push({
              type: 'VariableAssignment', 
              name: token.value,
              value: { type: 'String', value: valueToken.value }
            });
            current++;
          } else {
            let expression = '';
            while (current < tokens.length && tokens[current].type !== TokenType.EOF) {
              if (tokens[current].type === TokenType.KEYWORD) break;
              expression += tokens[current].value + ' ';
              current++;
            }
            ast.push({
              type: 'VariableAssignment',
              name: token.value, 
              value: { type: 'Expression', expression: expression.trim() }
            });
          }
        } else {
          ErrorHandler.showWarning(
            '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è',
            token.line,
            token.value
          );
          current++;
        }
      } else if (token.type === TokenType.KEYWORD && token.value === 'codego') {
        current++;
        const colonToken = tokens[current];
        
        if (!colonToken || colonToken.value !== ':') {
          ErrorHandler.showCriticalError(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å codego',
            token.line,
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: codego:(–∏–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)'
          );
          current++;
          continue;
        }
        
        current++;
        const openToken = tokens[current];
        
        if (!openToken || openToken.value !== '(') {
          ErrorHandler.showCriticalError(
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–∫–æ–±–∫–∞ –≤ codego',
            token.line,
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: codego:(–∏–º—è_–ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π)'
          );
          current++;
          continue;
        }
        
            current++;
            const varToken = tokens[current];
        
        if (!varToken || varToken.type !== TokenType.IDENTIFIER) {
          ErrorHandler.showCriticalError(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ codego',
            token.line,
            '–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: codego:(mycode)'
          );
          current++;
          continue;
        }
        
            current++;
        const closeToken = tokens[current];
        
        if (!closeToken || closeToken.value !== ')') {
          ErrorHandler.showCriticalError(
            '–ù–µ–∑–∞–∫—Ä—ã—Ç–∞—è —Å–∫–æ–±–∫–∞ –≤ codego',
            token.line,
            '–î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É )'
          );
        } else {
          if (!this.variables.has(varToken.value)) {
            ErrorHandler.showWarning(
              '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è codego –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
              varToken.line,
              varToken.value
            );
          }
          
              ast.push({
                type: 'CodeExecution',
                variable: varToken.value
              });
              current++;
        }
      } else if (token.type === TokenType.KEYWORD && token.value === 'imp') {
        current++;
        const moduleToken = tokens[current];
        
        if (!moduleToken || moduleToken.type !== TokenType.IDENTIFIER) {
          ErrorHandler.showCriticalError(
            '–ö–æ–º–∞–Ω–¥–∞ imp —Ç—Ä–µ–±—É–µ—Ç –∏–º—è –º–æ–¥—É–ª—è',
            token.line,
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: imp –∏–º—è_–º–æ–¥—É–ª—è'
          );
          current++;
          continue;
        }
        
        ast.push({
          type: 'ModuleImport',
          module: moduleToken.value
        });
        current++;
      } else if (token.type === TokenType.KEYWORD && token.value === 'if') {
        const ifNode = await this.parseIfStatement(tokens, current);
        if (ifNode.node) {
          ast.push(ifNode.node);
        }
        current = ifNode.newPosition;
      } else if (token.type === TokenType.KEYWORD && token.value === 'while') {
        const whileNode = await this.parseWhileStatement(tokens, current);
        if (whileNode.node) {
          ast.push(whileNode.node);
        }
        current = whileNode.newPosition;
      } else if (token.type === TokenType.KEYWORD && token.value === 'for') {
        const forNode = await this.parseForStatement(tokens, current);
        if (forNode.node) {
          ast.push(forNode.node);
        }
        current = forNode.newPosition;
      } else if (token.type === TokenType.UNKNOWN) {
        current++;
      } else {
        ErrorHandler.showWarning(
          '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω',
          token.line,
          token.value
        );
        current++;
      }
    }

    return ast;
  }

  async parseIfStatement(tokens: Token[], start: number): Promise<{node: ASTNode | null, newPosition: number}> {
    let current = start + 1;
    
    if (!tokens[current] || tokens[current].value !== '(') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫–æ–±–∫–∞ –ø–æ—Å–ª–µ if',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: if (—É—Å–ª–æ–≤–∏–µ):'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const condition = await this.parseCondition(tokens, current);
    current = condition.newPosition;
    
    if (!tokens[current] || tokens[current].value !== ')') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞',
        tokens[start].line,
        '–î–æ–±–∞–≤—å—Ç–µ ) –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].value !== ':') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è : –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: if (—É—Å–ª–æ–≤–∏–µ):'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].type !== TokenType.INDENT) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ :',
        tokens[start].line,
        '–°–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const body = await this.parseIndentedBlock(tokens, current);
    current = body.newPosition;
    
    let elseBody = null;
    if (tokens[current] && tokens[current].type === TokenType.KEYWORD && tokens[current].value === 'else') {
      current++;
      if (!tokens[current] || tokens[current].value !== ':') {
        ErrorHandler.showCriticalError(
          '–û–∂–∏–¥–∞–µ—Ç—Å—è : –ø–æ—Å–ª–µ else',
          tokens[current-1].line,
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: else:'
        );
        return { node: null, newPosition: current };
      }
      
      current++;
      
      if (!tokens[current] || tokens[current].type !== TokenType.INDENT) {
        ErrorHandler.showCriticalError(
          '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ else:',
          tokens[current-1].line,
          '–°–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –¥–ª—è –±–ª–æ–∫–∞ else'
        );
        return { node: null, newPosition: current };
      }
      
      current++;
      const elseResult = await this.parseIndentedBlock(tokens, current);
      elseBody = elseResult.body;
      current = elseResult.newPosition;
    }
    
    return {
      node: {
        type: 'IfStatement',
        condition: condition.condition,
        body: body.body,
        elseBody: elseBody
      },
      newPosition: current
    };
  }

  async parseWhileStatement(tokens: Token[], start: number): Promise<{node: ASTNode | null, newPosition: number}> {
    let current = start + 1;
    
    if (!tokens[current] || tokens[current].value !== '(') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫–æ–±–∫–∞ –ø–æ—Å–ª–µ while',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: while (—É—Å–ª–æ–≤–∏–µ):'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const condition = await this.parseCondition(tokens, current);
    current = condition.newPosition;
    
    if (!tokens[current] || tokens[current].value !== ')') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞',
        tokens[start].line,
        '–î–æ–±–∞–≤—å—Ç–µ ) –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].value !== ':') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è : –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: while (—É—Å–ª–æ–≤–∏–µ):'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].type !== TokenType.INDENT) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ :',
        tokens[start].line,
        '–°–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const body = await this.parseIndentedBlock(tokens, current);
    current = body.newPosition;
    
    return {
      node: {
        type: 'WhileStatement',
        condition: condition.condition,
        body: body.body
      },
      newPosition: current
    };
  }

  async parseForStatement(tokens: Token[], start: number): Promise<{node: ASTNode | null, newPosition: number}> {
    let current = start + 1;
    
    if (!tokens[current] || tokens[current].value !== '(') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–∫–æ–±–∫–∞ –ø–æ—Å–ª–µ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (i = 0; i < 10; i = i + 1) { –∫–æ–¥ }'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    const initToken = tokens[current];
    if (!initToken || initToken.type !== TokenType.IDENTIFIER) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è = –Ω–∞—á–∞–ª–æ; ...'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    if (!tokens[current] || tokens[current].value !== '=') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è = –≤ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (i = 0; ...'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const startValueToken = tokens[current];
    if (!startValueToken || startValueToken.type !== TokenType.NUMBER) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –≤ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (i = 0; ...'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    if (!tokens[current] || tokens[current].value !== ';') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è ; –≤ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (i = 0; —É—Å–ª–æ–≤–∏–µ; ...'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const condition = await this.parseCondition(tokens, current);
    current = condition.newPosition;
    
    if (!tokens[current] || tokens[current].value !== ';') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è ; –ø–æ—Å–ª–µ —É—Å–ª–æ–≤–∏—è –≤ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (...; —É—Å–ª–æ–≤–∏–µ; –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    const incrementVar = tokens[current];
    if (!incrementVar || incrementVar.type !== TokenType.IDENTIFIER) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≤ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–µ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (...; ...; i = i + 1)'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    if (!tokens[current] || tokens[current].value !== '=') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è = –≤ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–µ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (...; ...; i = i + 1)'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    let incrementExpr = '';
    while (current < tokens.length && tokens[current].value !== ')') {
      incrementExpr += tokens[current].value + ' ';
      current++;
    }
    
    if (!tokens[current] || tokens[current].value !== ')') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –≤ for',
        tokens[start].line,
        '–î–æ–±–∞–≤—å—Ç–µ ) –≤ –∫–æ–Ω—Ü–µ for'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].value !== ':') {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è : –ø–æ—Å–ª–µ for',
        tokens[start].line,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: for (...):'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    
    if (!tokens[current] || tokens[current].type !== TokenType.INDENT) {
      ErrorHandler.showCriticalError(
        '–û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ :',
        tokens[start].line,
        '–°–¥–µ–ª–∞–π—Ç–µ –æ—Ç—Å—Ç—É–ø –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞'
      );
      return { node: null, newPosition: current };
    }
    
    current++;
    const body = await this.parseIndentedBlock(tokens, current);
    current = body.newPosition;
    
    return {
      node: {
        type: 'ForStatement',
        variable: initToken.value,
        startValue: parseInt(startValueToken.value),
        condition: condition.condition,
        increment: incrementExpr.trim(),
        body: body.body
      },
      newPosition: current
    };
  }

  async parseCondition(tokens: Token[], start: number): Promise<{condition: any, newPosition: number}> {
    let current = start;
    let leftSide = '';
    
    while (current < tokens.length && 
           tokens[current].type !== TokenType.COMPARISON && 
           tokens[current].value !== ')' && 
           tokens[current].value !== ';') {
      leftSide += tokens[current].value + ' ';
      current++;
    }
    
    if (current >= tokens.length || tokens[current].type !== TokenType.COMPARISON) {
      return {
        condition: { left: leftSide.trim(), operator: '==', right: 'true' },
        newPosition: current
      };
    }
    
    const operator = tokens[current].value;
    current++;
    
    let rightSide = '';
    while (current < tokens.length && 
           tokens[current].value !== ')' && 
           tokens[current].value !== ';') {
      rightSide += tokens[current].value + ' ';
      current++;
    }
    
    return {
      condition: {
        left: leftSide.trim(),
        operator: operator,
        right: rightSide.trim()
      },
      newPosition: current
    };
  }

  async parseIndentedBlock(tokens: Token[], start: number): Promise<{body: ASTNode[], newPosition: number}> {
    const body: ASTNode[] = [];
    let current = start;
    
    while (current < tokens.length && tokens[current].type !== TokenType.DEDENT && tokens[current].type !== TokenType.EOF) {
      const token = tokens[current];
      
      if (token.type === TokenType.KEYWORD && token.value === 'conlog') {
        current++;
        const nextToken = tokens[current];
        
        if (nextToken && nextToken.type === TokenType.STRING) {
          body.push({
            type: 'FunctionCall',
            name: 'conlog',
            args: [{ type: 'String', value: nextToken.value }]
          });
          current++;
        } else if (nextToken && nextToken.type === TokenType.PARENTHESIS && nextToken.value === '(') {
          current++;
          const varToken = tokens[current];
          
          if (varToken && varToken.type === TokenType.IDENTIFIER) {
            current++;
            const closeToken = tokens[current];
            
            if (closeToken && closeToken.value === ')') {
              body.push({
                type: 'FunctionCall',
                name: 'conlog',
                args: [{ type: 'Variable', name: varToken.value }]
              });
              current++;
            }
          }
        }
      } else if (token.type === TokenType.IDENTIFIER) {
        const nextToken = tokens[current + 1];
        if (nextToken && nextToken.type === TokenType.OPERATOR && nextToken.value === '=') {
          current += 2;
          const valueToken = tokens[current];
          
          if (valueToken) {
            if (valueToken.type === TokenType.NUMBER && (current + 1 >= tokens.length || 
                tokens[current + 1].type === TokenType.DEDENT || tokens[current + 1].type === TokenType.KEYWORD)) {
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'Number', value: parseInt(valueToken.value) }
              });
              current++;
            } else if (valueToken.type === TokenType.STRING && (current + 1 >= tokens.length || 
                      tokens[current + 1].type === TokenType.DEDENT || tokens[current + 1].type === TokenType.KEYWORD)) {
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'String', value: valueToken.value }
              });
              current++;
            } else {
              let expression = '';
              while (current < tokens.length && tokens[current].type !== TokenType.DEDENT && tokens[current].type !== TokenType.KEYWORD) {
                expression += tokens[current].value + ' ';
                current++;
              }
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'Expression', expression: expression.trim() }
              });
            }
          }
        } else {
          current++;
        }
      } else {
        current++;
      }
    }
    
    return { body, newPosition: current };
  }

  async parseBlock(tokens: Token[], start: number): Promise<{body: ASTNode[], newPosition: number}> {
    const body: ASTNode[] = [];
    let current = start;
    
    while (current < tokens.length && tokens[current].value !== '}') {
      const token = tokens[current];
      
      if (token.type === TokenType.KEYWORD && token.value === 'conlog') {
        current++;
        const nextToken = tokens[current];
        
        if (nextToken && nextToken.type === TokenType.STRING) {
          body.push({
            type: 'FunctionCall',
            name: 'conlog',
            args: [{ type: 'String', value: nextToken.value }]
          });
          current++;
        } else if (nextToken && nextToken.type === TokenType.PARENTHESIS && nextToken.value === '(') {
          current++;
          const varToken = tokens[current];
          
          if (varToken && varToken.type === TokenType.IDENTIFIER) {
            current++;
            const closeToken = tokens[current];
            
            if (closeToken && closeToken.value === ')') {
              body.push({
                type: 'FunctionCall',
                name: 'conlog',
                args: [{ type: 'Variable', name: varToken.value }]
              });
              current++;
            }
          }
        }
      } else if (token.type === TokenType.IDENTIFIER) {
        const nextToken = tokens[current + 1];
        if (nextToken && nextToken.type === TokenType.OPERATOR && nextToken.value === '=') {
          current += 2;
          const valueToken = tokens[current];
          
          if (valueToken) {
            if (valueToken.type === TokenType.NUMBER && (current + 1 >= tokens.length || 
                tokens[current + 1].value === '}' || tokens[current + 1].type === TokenType.KEYWORD)) {
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'Number', value: parseInt(valueToken.value) }
              });
              current++;
            } else if (valueToken.type === TokenType.STRING && (current + 1 >= tokens.length || 
                      tokens[current + 1].value === '}' || tokens[current + 1].type === TokenType.KEYWORD)) {
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'String', value: valueToken.value }
              });
              current++;
            } else {
              let expression = '';
              while (current < tokens.length && tokens[current].value !== '}' && tokens[current].type !== TokenType.KEYWORD) {
                expression += tokens[current].value + ' ';
                current++;
              }
              body.push({
                type: 'VariableAssignment',
                name: token.value,
                value: { type: 'Expression', expression: expression.trim() }
              });
            }
          }
        } else {
          current++;
        }
      } else {
        current++;
      }
    }
    
    return { body, newPosition: current };
  }

  async execute(ast: ASTNode[]): Promise<void> {
    for (const node of ast) {
      switch (node.type) {
        case 'FunctionCall':
          if (node.name === 'conlog') {
            if (node.args[0].type === 'String') {
              console.log(node.args[0].value);
            } else if (node.args[0].type === 'Variable') {
              const value = this.variables.get(node.args[0].name);
              console.log(value !== undefined ? value : 'undefined');
            }
          }
          break;

        case 'VariableAssignment':
          if (node.value.type === 'Number') {
            this.variables.set(node.name, node.value.value);
          } else if (node.value.type === 'String') {
            this.variables.set(node.name, node.value.value);
          } else if (node.value.type === 'Expression') {
            const result = this.evaluateExpression(node.value.expression);
            this.variables.set(node.name, result);
          }
          break;

        case 'CodeExecution':
          const code = this.variables.get(node.variable);
          if (typeof code === 'string') {
            const tokens = this.tokenize(code);
            const codeAst = await this.parse(tokens);
            await this.execute(codeAst);
          }
          break;

        case 'ModuleImport':
          this.loadModule(node.module);
          break;

        case 'IfStatement':
          const conditionResult = this.evaluateCondition(node.condition);
          if (conditionResult) {
            await this.execute(node.body);
          } else if (node.elseBody) {
            await this.execute(node.elseBody);
          }
          break;

        case 'WhileStatement':
          while (this.evaluateCondition(node.condition)) {
            await this.execute(node.body);
          }
          break;

        case 'ForStatement':
          this.variables.set(node.variable, node.startValue);
          while (this.evaluateCondition(node.condition)) {
            await this.execute(node.body);
            const incrementResult = this.evaluateExpression(node.increment);
            this.variables.set(node.variable, incrementResult);
          }
          break;
      }
    }
  }

  evaluateCondition(condition: any): boolean {
    const left = this.resolveValue(condition.left);
    const right = this.resolveValue(condition.right);
    
    switch (condition.operator) {
      case '==': return left == right;
      case '!=': return left != right;
      case '>': return left > right;
      case '<': return left < right;
      case '>=': return left >= right;
      case '<=': return left <= right;
      default: return false;
    }
  }

  resolveValue(value: string): any {
    if (value === 'true') return true;
    if (value === 'false') return false;
    if (!isNaN(Number(value))) return Number(value);
    if (this.variables.has(value)) return this.variables.get(value);
    return value;
  }

  evaluateExpression(expr: string): number {
    try {
      let processedExpr = expr;
      
      this.variables.forEach((varValue, varName) => {
        const regex = new RegExp(`\\b${varName}\\b`, 'g');
        processedExpr = processedExpr.replace(regex, String(varValue));
      });
      
      const cleanExpr = processedExpr.replace(/[^0-9+\-*/.() ]/g, '');
      return eval(cleanExpr);
    } catch {
      return 0;
    }
  }

  loadModule(moduleName: string): void {
    try {
      const modulePath = path.join(process.cwd(), 'crack_modules', moduleName, 'src', 'index.js');
      if (fs.existsSync(modulePath)) {
        const moduleExports = require(modulePath);
        this.modules.set(moduleName, moduleExports);
        console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω`);
      } else {
        console.log(`‚ùå –ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
    }
  }

  async run(filename: string): Promise<void> {
    this.currentFilename = filename;
    try {
      const code = fs.readFileSync(filename, 'utf-8');
      const tokens = this.tokenize(code);
      const ast = await this.parse(tokens);
      await this.execute(ast);
    } catch (error) {
      console.log(`
‚ùå –û–®–ò–ë–ö–ê –°–ò–ù–¢–ê–ö–°–ò–°–ê ‚ùå
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥!     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);
      console.error(error);
    }
  }
}

async function main(): Promise<void> {
  const interpreter = new CrackInterpreter();
  
  if (process.argv.length < 3) {
    interpreter.showLogo();
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: crack <file.crack>');
    return;
  }

  const filename = process.argv[2];
  await interpreter.run(filename);
}

if (require.main === module) {
  main();
}

export { CrackInterpreter, main }; 