#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrapmManager = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const https = __importStar(require("https"));
class CrapmManager {
    constructor() {
        this.baseUrl = 'https://raw.githubusercontent.com/derxanax/crack/main/modules';
    }
    showLogo() {
        console.log(`
üì¶ CRAPM - Crack Package Manager üì¶
  ‚û§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ –¥–ª—è —è–∑—ã–∫–∞ Crack
`);
    }
    async install(moduleName) {
        console.log(`
üì¶ CRAPM - Crack Package Manager üì¶
  ‚û§ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª—å ${moduleName}...
`);
        const moduleDir = path.join(process.cwd(), 'crack_modules', moduleName);
        if (!fs.existsSync(path.join(process.cwd(), 'crack_modules'))) {
            fs.mkdirSync(path.join(process.cwd(), 'crack_modules'), { recursive: true });
        }
        if (!fs.existsSync(moduleDir)) {
            fs.mkdirSync(moduleDir, { recursive: true });
            fs.mkdirSync(path.join(moduleDir, 'src'), { recursive: true });
        }
        try {
            await this.downloadFile(`${this.baseUrl}/${moduleName}/info.json`, path.join(moduleDir, 'info.json'));
            await this.downloadFile(`${this.baseUrl}/${moduleName}/package.json`, path.join(moduleDir, 'package.json'));
            await this.downloadFile(`${this.baseUrl}/${moduleName}/src/index.js`, path.join(moduleDir, 'src', 'index.js'));
            console.log(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!`);
            console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: imp ${moduleName}`);
        }
        catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`);
            if (error.message.includes('404')) {
                console.log(`
ü§î –ú–æ–¥—É–ª—å "${moduleName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø–µ—á–∞—Ç–∫–∞)
  ‚Ä¢ –ú–æ–¥—É–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'crapm list-available' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥—É–ª–∏:
  ‚Ä¢ input  - –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º
  ‚Ä¢ math   - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  ‚Ä¢ string - –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
  ‚Ä¢ file   - –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
`);
            }
            else if (error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND')) {
                console.log(`
üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º!

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
  ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏/—Ñ–∞–µ—Ä–≤–æ–ª–∞
  ‚Ä¢ DNS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
`);
            }
            else {
                console.log(`
üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
  ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ
  ‚Ä¢ –û—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
`);
            }
            if (fs.existsSync(moduleDir)) {
                fs.rmSync(moduleDir, { recursive: true, force: true });
                console.log('üßπ –û—á–∏—Å—Ç–∏–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥—É–ª—è');
            }
        }
    }
    async listAvailable() {
        console.log(`
üì¶ CRAPM - –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
`);
        const availableModules = [
            { name: 'input', description: '–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–≤–æ–¥–æ–º' },
            { name: 'math', description: '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏' },
            { name: 'string', description: '–†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏' },
            { name: 'file', description: '–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏' },
            { name: 'http', description: 'HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–µ—Ä–≤–µ—Ä' },
            { name: 'crypto', description: '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏' }
        ];
        availableModules.forEach(module => {
            console.log(`  üìã ${module.name.padEnd(10)} - ${module.description}`);
        });
        console.log(`
üí° –£—Å—Ç–∞–Ω–æ–≤–∫–∞: crapm install <module_name>
üîç –ü—Ä–∏–º–µ—Ä: crapm install input
`);
    }
    uninstall(moduleName) {
        const moduleDir = path.join(process.cwd(), 'crack_modules', moduleName);
        if (fs.existsSync(moduleDir)) {
            fs.rmSync(moduleDir, { recursive: true, force: true });
            console.log(`üóëÔ∏è –ú–æ–¥—É–ª—å ${moduleName} —É–¥–∞–ª–µ–Ω`);
        }
        else {
            console.log(`‚ùå –ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            console.log(`üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'crapm list' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π`);
        }
    }
    list() {
        const modulesDir = path.join(process.cwd(), 'crack_modules');
        if (!fs.existsSync(modulesDir)) {
            console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç');
            console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: crapm install <module_name>');
            return;
        }
        const modules = fs.readdirSync(modulesDir);
        if (modules.length === 0) {
            console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç');
            console.log('üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å: crapm install <module_name>');
        }
        else {
            console.log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:');
            modules.forEach(module => {
                const infoPath = path.join(modulesDir, module, 'info.json');
                if (fs.existsSync(infoPath)) {
                    try {
                        const info = JSON.parse(fs.readFileSync(infoPath, 'utf-8'));
                        console.log(`  ‚úÖ ${module} v${info.version} - ${info.description}`);
                    }
                    catch {
                        console.log(`  ‚ö†Ô∏è ${module} (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω info.json)`);
                    }
                }
                else {
                    console.log(`  ‚ö†Ô∏è ${module} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç info.json)`);
                }
            });
        }
    }
    downloadFile(url, filepath) {
        return new Promise((resolve, reject) => {
            const request = https.get(url, (response) => {
                if (response.statusCode === 404) {
                    reject(new Error(`HTTP 404: –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (${url})`));
                    return;
                }
                if (response.statusCode !== 200) {
                    reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
                    return;
                }
                const fileStream = fs.createWriteStream(filepath);
                response.pipe(fileStream);
                fileStream.on('finish', () => {
                    fileStream.close();
                    resolve();
                });
                fileStream.on('error', (err) => {
                    fs.unlink(filepath, () => { });
                    reject(err);
                });
            });
            request.on('error', (err) => {
                reject(new Error(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}`));
            });
            request.setTimeout(10000, () => {
                request.destroy();
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (10 —Å–µ–∫)'));
            });
        });
    }
}
exports.CrapmManager = CrapmManager;
function main() {
    const crapm = new CrapmManager();
    const args = process.argv.slice(2);
    if (args.length === 0) {
        crapm.showLogo();
        console.log(`
–ö–æ–º–∞–Ω–¥—ã:
  install <module>     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å
  uninstall <module>   - –£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å  
  list                 - –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  list-available       - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π

–ü—Ä–∏–º–µ—Ä: crapm install input
`);
        return;
    }
    const command = args[0];
    const moduleName = args[1];
    switch (command) {
        case 'install':
            if (!moduleName) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏');
                console.log('üí° –ü—Ä–∏–º–µ—Ä: crapm install input');
                return;
            }
            crapm.install(moduleName);
            break;
        case 'uninstall':
            if (!moduleName) {
                console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                console.log('üí° –ü—Ä–∏–º–µ—Ä: crapm uninstall input');
                return;
            }
            crapm.uninstall(moduleName);
            break;
        case 'list':
            crapm.list();
            break;
        case 'list-available':
            crapm.listAvailable();
            break;
        default:
            console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: install, uninstall, list, list-available');
    }
}
if (require.main === module) {
    main();
}
//# sourceMappingURL=crapm.js.map